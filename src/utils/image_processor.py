from PIL import Image
import io
import os
import aiohttp
from telegram import File
import logging
from dataclasses import dataclass
from typing import Tuple, List
import asyncio

@dataclass
class ProcessingResult:
    bytes: bytes
    original_size: int
    final_size: int
    quality: int

async def check_quality(img: Image.Image, quality: int) -> Tuple[int, int, bytes]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"""
    output = io.BytesIO()
    img.save(output, format='JPEG', quality=quality, optimize=True)
    size = output.tell()
    return quality, size, output.getvalue()

async def process_image_bytes(
    image_bytes: bytes,
    target_width: int = None,
    target_height: int = None
) -> ProcessingResult:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—è —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    max_file_size = int(os.getenv('MAX_PROCESSED_FILE_SIZE', 400 * 1024))
    original_size = len(image_bytes)
    
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä —É–∂–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if original_size <= max_file_size:
        return ProcessingResult(
            bytes=image_bytes,
            original_size=original_size,
            final_size=original_size,
            quality=100
        )
    
    with Image.open(io.BytesIO(image_bytes)) as img:
        if img.mode in ('RGBA', 'P'):
            img = img.convert('RGB')
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if target_width and target_height:
            img = img.resize((target_width, target_height), Image.Resampling.LANCZOS)
            
            # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            output = io.BytesIO()
            img.save(output, format='JPEG', quality=100, optimize=True)
            size = output.tell()
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª —É–∂–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if size <= max_file_size:
                return ProcessingResult(
                    bytes=output.getvalue(),
                    original_size=original_size,
                    final_size=size,
                    quality=100
                )
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        control_points = [95, 80, 60, 40, 20, 5]
        tasks = [check_quality(img, q) for q in control_points]
        quality_sizes = await asyncio.gather(*tasks)
        quality_sizes.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–∞—é—â–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä
        for quality, size, bytes_data in quality_sizes:
            if size <= max_file_size:
                return ProcessingResult(
                    bytes=bytes_data,
                    original_size=original_size,
                    final_size=size,
                    quality=quality
                )
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
        return ProcessingResult(
            bytes=quality_sizes[-1][2],  # bytes –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            original_size=original_size,
            final_size=quality_sizes[-1][1],  # size –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            quality=quality_sizes[-1][0]  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        )

async def process_image_file(file: File) -> Tuple[str, ProcessingResult]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Telegram"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    output_path = f"data/processed_{file.file_unique_id}.jpg"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await file.download_to_drive(output_path)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç—ã
    with open(output_path, 'rb') as f:
        image_bytes = f.read()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    result = await process_image_bytes(image_bytes)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open(output_path, 'wb') as f:
        f.write(result.bytes)
    
    return output_path, result

async def process_image_from_url(url: str) -> Tuple[str, ProcessingResult]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    output_path = f"data/processed_{hash(url)}.jpg"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            image_bytes = await response.read()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        result = await process_image_bytes(image_bytes)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(output_path, 'wb') as f:
            f.write(result.bytes)
        
        return output_path, result
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

def get_image_dimensions(image_bytes: bytes) -> Tuple[int, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤"""
    with Image.open(io.BytesIO(image_bytes)) as img:
        return img.size

def calculate_resize_options(width: int, height: int) -> list:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    options = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    options.append({
        'emoji': 'üò¥',
        'width': width,
        'height': height,
        'description': f'–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {width}x{height}'
    })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–æ 640px
    if width > 640:
        new_height = int(height * (640 / width))
        options.append({
            'emoji': 'ü•ë',
            'width': 640,
            'height': new_height,
            'description': f'–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ 640x{new_height}'
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ç–∏–Ω–∞-–≤–µ—Ä—Å–∏—é –¥–ª—è 640px
        if width > 1280:
            new_height = int(height * (1280 / width))
            options.append({
                'emoji': '2Ô∏è‚É£ü•ë',
                'width': 1280,
                'height': new_height,
                'description': f'–ù–∞ —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è 1280x{new_height}'
            })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–æ 1280px
    if width > 1280:
        new_height = int(height * (1280 / width))
        options.append({
            'emoji': 'üçë',
            'width': 1280,
            'height': new_height,
            'description': f'–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É 1280x{new_height}'
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ç–∏–Ω–∞-–≤–µ—Ä—Å–∏—é –¥–ª—è 1280px
        if width > 2560:
            new_height = int(height * (2560 / width))
            options.append({
                'emoji': '2Ô∏è‚É£üçë',
                'width': 2560,
                'height': new_height,
                'description': f'–ù–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è 2560x{new_height}'
            })
    
    return options